generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

generator zod {
  provider = "zod-prisma-types"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  username         String?          @unique
  watchListEntries WatchlistEntry[]

  followers User[] @relation("FollowRelation")
  following User[] @relation("FollowRelation")

  chats    Chat[]
  messages Message[]
  Activity Activity[]
}

model WatchlistEntry {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mediaId   Int
  mediaType MediaType
  status    Status

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, mediaId, mediaType])
}

enum MediaType {
  SHOW
  MOVIE
}

enum Status {
  WATCHING
  PLAN_TO_WATCH
  COMPLETED
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String?
  read    Boolean   @default(false)
  readAt  DateTime?

  mediaId    Int?
  mediaType  MessageMediaType?
  mediaName  String?
  mediaImage String?

  spoilerMedia       String?
  spoilerDescription String?
  spoilerSeason      Int?
  spoilerEpisode     Int?
  spoilerRevealed    Boolean?

  senderUsername String
  sender         User   @relation(fields: [senderUsername], references: [username], onDelete: Cascade)

  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String
}

enum MessageMediaType {
  SHOW
  MOVIE
  PERSON
}

model Chat {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]
  users    User[]
}

model Activity {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status Status
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  mediaId    Int
  mediaType  MediaType
  mediaName  String?
  mediaImage String?

  @@unique([userId, mediaId, mediaType, status])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
